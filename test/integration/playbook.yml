- hosts: localhost
  tasks:
    - include_vars:
        name: ansible_base_variables
        file: group_vars/all.yml

    - include_vars:
        name: ansible_user_variables
        file: vars/user_settings.yml

    - lint:
      register: lint_blank_result
      ignore_errors: yes

    - assert:
        that: |
          lint_blank_result is failed and
          lint_blank_result.msg == "one of the following is required: rules_file, rules found in lint"

    - lint:
        rules_file: lint-rules.yml
      vars:
        external_path_var: apps.*.address
      register: lint_from_file_result

    - assert:
        that: lint_from_file_result.rule_count == 1

    - lint:
        rules:
          - state: deprecated
            path: foo
            msg: "use 'bar' instead of 'foo'!"

          - state: deprecated
            path: baz
            msg: ""

          - state: required
            path: services.*.address
            msg: every application must have an address

          - state: invalid
            path: services.*.port
            when: item is not number or item is lessthan(1024)
            msg: port must not be privileged (that is, only over 1024)

          - state: invalid
            path: services.*.address
            msg:  address must be an IP address (A record)
            when: item is not match('[\d\.]+')

          - state: suspicious
            path: '*'
            hint: Check for typos?
            when: |
              captures[0] in ansible_user_variables.keys() and
              captures[0] not in ansible_base_variables.keys()

          # warn about potentially invalid variables
          - state: suspicious
            path: services.*.*
            when: captures[1] not in ([ 'address', 'port' ])
            hint: property is not recognized, please check for typos

      register: lint_result
      failed_when: "'exception' in lint_result"

    - debug:
        var: lint_result
    - assert:
        that: |
          lint_result['issues'] == [
            {
              "path": "foo",
              "type": "deprecated"
            },
            {
              "path": "mistyped_var",
              "type": "suspicious"
            },
            {
              "path": "services.a.port",
              "type": "invalid"
            },
            {
              "path": "services.b.port",
              "type": "invalid"
            },
            {
              "path": "services.c.address",
              "type": "required"
            },
            {
              "path": "services.c.address",
              "type": "invalid"
            },
            {
              "path": "services.d.address",
              "type": "invalid"
            },
            {
              "path": "services.d.por",
              "type": "suspicious"
            },
            {
              "path": "services.d.port",
              "type": "invalid"
            }
          ]